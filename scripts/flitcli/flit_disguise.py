# -- LICENSE BEGIN --
#
# Copyright (c) 2015-2020, Lawrence Livermore National Security, LLC.
#
# Produced at the Lawrence Livermore National Laboratory
#
# Written by
#   Michael Bentley (mikebentley15@gmail.com),
#   Geof Sawaya (fredricflinstone@gmail.com),
#   and Ian Briggs (ian.briggs@utah.edu)
# under the direction of
#   Ganesh Gopalakrishnan
#   and Dong H. Ahn.
#
# LLNL-CODE-743137
#
# All rights reserved.
#
# This file is part of FLiT. For details, see
#   https://pruners.github.io/flit
# Please also read
#   https://github.com/PRUNERS/FLiT/blob/master/LICENSE
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
# - Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the disclaimer below.
#
# - Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the disclaimer
#   (as noted below) in the documentation and/or other materials
#   provided with the distribution.
#
# - Neither the name of the LLNS/LLNL nor the names of its
#   contributors may be used to endorse or promote products derived
#   from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL
# SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.
#
# Additional BSD Notice
#
# 1. This notice is required to be provided under our contract
#    with the U.S. Department of Energy (DOE). This work was
#    produced at Lawrence Livermore National Laboratory under
#    Contract No. DE-AC52-07NA27344 with the DOE.
#
# 2. Neither the United States Government nor Lawrence Livermore
#    National Security, LLC nor any of their employees, makes any
#    warranty, express or implied, or assumes any liability or
#    responsibility for the accuracy, completeness, or usefulness of
#    any information, apparatus, product, or process disclosed, or
#    represents that its use would not infringe privately-owned
#    rights.
#
# 3. Also, reference herein to any specific commercial products,
#    process, or services by trade name, trademark, manufacturer or
#    otherwise does not necessarily constitute or imply its
#    endorsement, recommendation, or favoring by the United States
#    Government or Lawrence Livermore National Security, LLC. The
#    views and opinions of authors expressed herein do not
#    necessarily state or reflect those of the United States
#    Government or Lawrence Livermore National Security, LLC, and
#    shall not be used for advertising or product endorsement
#    purposes.
#
# -- LICENSE END --

'Implements the disguise subcommand to anonymize project-specific data'

import flitutil as util
import flit_bisect as bisect

import argparse
import csv
import glob
import multiprocessing as mp
import os
import re
import subprocess as subp
import sys
try:
    import flitelf as elf
except ImportError:
    elf = None

brief_description = 'Anonymizes project-specific data from text files'

def populate_parser(parser=None):
    'Populate or create an ArgumentParser'
    if parser is None:
        parser = argparse.ArgumentParser()
    parser.description = '''
        This command disguises (a.k.a., anonymizes) text or log files.  Fields
        that can be disguised are source file names, test names, and function names.

        To accomplish this feat, a mapping csv file will either be provided by
        the user (with --disguise-map) or will be autogenerated as
        "disguise.csv" (default behavior) from the contents of the Makefile and
        the object files for the baseline compilation.  The mapping is applied
        as a very simple search and replace.

        To undo the disguise, use the --undo flag either allowing the default
        "disguise.csv" file to be used or specifying one with --disguise-map.
        '''
    parser.add_argument('-g', '--generate', action='store_true',
                        help='''
                            Just generate the disguise map as "disguise.csv"
                            and then exit.  It will be overwritten if it
                            already exists.  Most users will not need to use
                            this flag.  If you use this flag with the
                            --disguise-map flag, then it will output the map to
                            the specified disguise map.
                            ''')
    parser.add_argument('-o', '--output',
                        help='''
                            Output the disguised version of the input file to
                            this specified file.  The default behavior is to
                            output to standard output.
                            ''')
    parser.add_argument('-m', '--disguise-map', default='disguise.csv',
                        help='''
                            Specify a specific CSV file to use as the disguise
                            map.  The CSV file is expected to have a header row
                            with the column names "value" and "disguise".  Both
                            columns should have unique values, i.e., a
                            one-to-one mapping.  The default is "disguise.csv"
                            which is autogenerated if it is not there.
                            ''')
    parser.add_argument('-u', '--undo', action='store_true',
                        help='''
                            Undo the disguising.  This will use the disguise
                            map to do search and replace in reverse.  For
                            example, this can be used to de-anonymize the
                            analysis done by someone with the anonymized
                            file(s).
                            ''')
    parser.add_argument('-j', '--jobs', default=None,
                        help='''
                            When generating the disguise map, we may need to
                            compile the gtrun executable using the
                            autogenerated flit Makefile.  This flag specifies
                            the number of jobs to give to GNU make.  The
                            default behavior is to defer to the MAKEFLAGS
                            environment variable.  If that variable is not set,
                            then we will use the number of processors.
                            ''')
    parser.add_argument('file', nargs='?',
                        help='''
                            Text file to disguise.  Disguising is done with
                            simple search and replace.  The "value" column of
                            the disguise map CSV file is searched for and
                            replaced with the "value" field.  If --undo is
                            specified, then it is done in reverse.

                            If the file is not specified, then it is read from
                            standard in.
                            ''')
    return parser

def generate_disguise_map(outfile='disguise.csv', jobs=None):
    'Generate the disguise map, often called from the Makefile'

    if not jobs and not hasattr(os.environ, 'MAKEFLAGS'):
        jobs = mp.cpu_count()

    # make sure gtrun is compiled
    make_args = ['make', 'gtrun']
    if jobs:
        make_args.append('-j{}'.format(jobs))
    subp.check_call(make_args)

    makevars = util.extract_make_vars()

    # get list of source files
    sources = sorted(makevars['SOURCE'])

    # get list of object files
    objdir = makevars['GT_OBJ_DIR'][0]
    objects = sorted([os.path.basename(source) + '.o' for source in sources])

    # get list of function symbols and demangled signatures
    symbol_objects, _ = elf.extract_symbols([
        os.path.join(objdir, obj) for obj in objects])
    symbols = sorted(sym.symbol for sym in symbol_objects)
    demangled = sorted(sym.demangled for sym in symbol_objects)

    # get list of tests
    tests = subp.check_output(['./gtrun', '--list-tests']).decode('utf-8').splitlines()

    seen_values = set()

    # write mapping to file
    with open(outfile, 'w') as fout:
        writer = csv.DictWriter(fout, ['disguise', 'value'])
        writer.writeheader()

        def writerows(disguise_base, values):
            'Only write rows that have a unique value'
            unique_values = [val for val in values if val not in seen_values]
            seen_values.update(unique_values)
            writer.writerows(gen_disguise_list(disguise_base, unique_values))

        writerows('objfile', objects)
        writerows('filepath', sources)
        writerows('filename', sorted(os.path.basename(x) for x in sources))
        writerows('symbol', symbols)
        writerows('demangled', demangled)
        writerows('test', sorted(tests))

    print('Created {}'.format(outfile))

def gen_disguise_list(disguise_base, values):
    '''
    Generates a list of dictionaries for insertion into a disguise map.
    Will add an integer to the disguise base, zero padded based on the number
    of values in the given list of values.

    @param disguise_base (str): basename of the disguise value
    @param values (list(str)): values to be disguised in this order

    >>> gen_disguise_list('ababab', [])
    []

    >>> expected = [
    ...     {'disguise': 'happy-1', 'value': 'me'},
    ...     {'disguise': 'happy-2', 'value': 'myself'},
    ...     {'disguise': 'happy-3', 'value': 'I'},
    ...     ]
    >>> expected == gen_disguise_list('happy', ['me', 'myself', 'I'])
    True

    >>> expected = [
    ...     {'disguise': 'sad-01', 'value': '0'},
    ...     {'disguise': 'sad-02', 'value': '1'},
    ...     {'disguise': 'sad-03', 'value': '2'},
    ...     {'disguise': 'sad-04', 'value': '3'},
    ...     {'disguise': 'sad-05', 'value': '4'},
    ...     {'disguise': 'sad-06', 'value': '5'},
    ...     {'disguise': 'sad-07', 'value': '6'},
    ...     {'disguise': 'sad-08', 'value': '7'},
    ...     {'disguise': 'sad-09', 'value': '8'},
    ...     {'disguise': 'sad-10', 'value': '9'},
    ...     {'disguise': 'sad-11', 'value': '10'},
    ...     ]
    >>> expected == gen_disguise_list('sad', [str(i) for i in range(11)])
    True
    '''
    ndigits = len(str(len(values)))
    format_str = '{}-{{i:0{}d}}'.format(disguise_base, ndigits)
    disguises = [{'disguise': format_str.format(i=i+1), 'value': val}
                 for i, val in enumerate(values)]
    return disguises

def read_disguise_map(fname):
    'Read and return the forward and reverse dictionary of the disguise map'
    forward_map = {}
    reverse_map = {}
    with open(fname, 'r') as fin:
        reader = csv.DictReader(fin)
        assert 'disguise' in reader.fieldnames
        assert 'value' in reader.fieldnames
        for entry in reader:
            disguise, value = entry['disguise'], entry['value']
            assert value not in forward_map
            assert disguise not in reverse_map
            forward_map[value] = disguise
            reverse_map[disguise] = value
    return forward_map, reverse_map

def main(arguments, prog=None):
    'Main logic here'
    parser = populate_parser()
    if prog: parser.prog = prog
    args = parser.parse_args(arguments)

    if args.generate:
        generate_disguise_map(args.disguise_map)
        return 0

    if args.disguise_map == 'disguise.csv':
        generate_disguise_map(args.disguise_map)

    forward_map, reverse_map = read_disguise_map(args.disguise_map)
    mapping_to_use = reverse_map if args.undo else forward_map

    # choose the input stream
    if args.file:
        fin = open(args.file, 'r')
    else:
        fin = sys.stdin

    # choose the output stream
    if args.output:
        fout = open(args.output, 'w')
    else:
        fout = sys.stdout

    # like "grep -w" with a replace
    for line in fin:
        for key, val in mapping_to_use.items():
            pattern = re.escape(key)
            if key[0].isalpha():
                pattern = r'\b' + pattern
            if key[-1].isalpha():
                pattern = pattern + r'\b'
            if re.search(pattern, line):
                fout.write(re.sub(pattern, val, line))
                break
        else:
            fout.write(line)

    fout.flush()
    if args.file:   fin.close()
    if args.output: fout.close()

    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
